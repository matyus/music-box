{"version":3,"sources":["../node_modules/matter-js/build/matter.js","../node_modules/matter-collision-events/node_modules/matter-js/build/matter.js","../node_modules/matter-collision-events/build/matter-collision-events.min.js","../node_modules/howler/dist/howler.js","sounds/mario.js","sound.js","controls.js","platform.js","fountain.js","game.js","index.js"],"names":["SOUNDS","name","path","require","soundMap","getSounds","getSoundMap","forEach","sound","index","Howl","src","playSound","soundId","play","selectedSoundId","currentKey","currentKeyLabel","currentKeyInput","delay","delayLabel","delayInput","rotate","rotateLabel","rotateInput","getSelectedSoundId","getCurrentKey","getDelay","getRotation","setCurrentKey","key","document","getElementById","value","updateCurrentKey","buildControls","element","select","createElement","id","addEventListener","event","console","log","target","selectedOptions","option","text","add","append","innerText","readOnly","disabled","type","step","platforms","platformDiagram","handleCollision","pair","bodyA","bodyB","label","createPlatform","world","x","y","angle","body","Bodies","rectangle","isStatic","onCollide","addPlatform","source","constraint","pointA","removePlatform","bodies","Object","values","map","platform","Query","point","remove","updatePlatformSound","platformId","updatePlatformAngle","setAngle","buildPlatformDiagram","render","strokeStyle","lineWidth","updatePlatformDiagram","fountains","addBall","ball","circle","friction","restitution","density","plugin","wrap","min","bounds","max","addFountain","keys","length","head","window","setInterval","interval","removeFountain","fountain","clearInterval","Game","engine","Engine","create","gravity","Render","showDebug","showVelocity","showShadows","showMousePosition","run","mouse","Mouse","canvas","mouseConstraint","MouseConstraint","stiffness","visible","on","Matter","use","MatterCollisionEvents"],"mappings":"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","file":"src.fa675f0e.js","sourceRoot":"../src","sourcesContent":["/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","/**\n* matter-js 0.12.0 by @liabru 2017-02-02\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) 2014 Liam Brummitt\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = Common.shadeColor(defaultFillStyle, -20);\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass and density are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass is automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = _totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     */\n    Body.rotate = function(body, rotation) {\n        Body.setAngle(body, body.angle + rotation);\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, body.position);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n\n            if (!body.isStatic) {\n                part.area = Vertices.area(part.vertices);\n                Body.setMass(part, body.density * part.area);\n\n                // update inertia (requires vertices to be at origin)\n                Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n                Body.setInertia(part, Vertices.inertia(part.vertices, part.mass));\n                Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n            }\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n\n        if (!body.isStatic) {\n            var total = _totalProperties(body);\n            body.area = total.area;\n            Body.setMass(body, total.mass);\n            Body.setInertia(body, total.inertia);\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    var _totalProperties = function(body) {\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            properties.mass += part.mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, \n                                           Vector.mult(part.position, part.mass !== Infinity ? part.mass : 1));\n        }\n\n        properties.centre = Vector.div(properties.centre, \n                                       properties.mass !== Infinity ? properties.mass : body.parts.length);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 1.5\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.add\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = _getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = _regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = _getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    _bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = _createBucket(buckets, bucketId);\n                            _bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = _createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    var _regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return _createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    var _getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return _createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    var _createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    var _getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    var _createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    var _bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    var _bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    var _createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    var _pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > _pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, ray.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, ray.bounds)) {\n                        var collision = SAT.collides(part, ray);\n                        if (collision.collided) {\n                            collision.body = collision.bodyA = collision.bodyB = bodyA;\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor || pair.separation < 0)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = _overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = _overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = _overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = _findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = _findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    var _overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            _projectToAxis(projectionA, verticesA, axis);\n            _projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    var _projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    var _findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\n// TODO: fix instability issues with torque\n// TODO: linked constraints\n// TODO: breakable constraints\n// TODO: collision constraints\n// TODO: allow constrained bodies to sleep\n// TODO: handle 0 length constraints properly\n// TODO: impulse caching and warming\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    var _minLength = 0.000001,\n        _minDifference = 0.001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = constraint.length || length || _minLength;\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff'\n        };\n        \n        constraint.render = Common.extend(render, constraint.render);\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || 1;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        return constraint;\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        for (var i = 0; i < constraints.length; i++) {\n            Constraint.solve(constraints[i], timeScale);\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            constraint.pointA = Vector.rotate(pointA, bodyA.angle - constraint.angleA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            constraint.pointB = Vector.rotate(pointB, bodyB.angle - constraint.angleB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength === 0)\n            currentLength = _minLength;\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            normal = Vector.div(delta, currentLength),\n            force = Vector.mult(delta, difference * 0.5 * constraint.stiffness * timeScale * timeScale);\n        \n        // if difference is very small, we can skip\n        if (Math.abs(1 - (currentLength / constraint.length)) < _minDifference * timeScale)\n            return;\n\n        var velocityPointA,\n            velocityPointB,\n            offsetA,\n            offsetB,\n            oAn,\n            oBn,\n            bodyADenom,\n            bodyBDenom;\n    \n        if (bodyA && !bodyA.isStatic) {\n            // point body offset\n            offsetA = { \n                x: pointAWorld.x - bodyA.position.x + force.x, \n                y: pointAWorld.y - bodyA.position.y + force.y\n            };\n            \n            // update velocity\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            \n            // find point velocity and body mass\n            velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity));\n            oAn = Vector.dot(offsetA, normal);\n            bodyADenom = bodyA.inverseMass + bodyA.inverseInertia * oAn * oAn;\n        } else {\n            velocityPointA = { x: 0, y: 0 };\n            bodyADenom = bodyA ? bodyA.inverseMass : 0;\n        }\n            \n        if (bodyB && !bodyB.isStatic) {\n            // point body offset\n            offsetB = { \n                x: pointBWorld.x - bodyB.position.x - force.x, \n                y: pointBWorld.y - bodyB.position.y - force.y \n            };\n            \n            // update velocity\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // find point velocity and body mass\n            velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity));\n            oBn = Vector.dot(offsetB, normal);\n            bodyBDenom = bodyB.inverseMass + bodyB.inverseInertia * oBn * oBn;\n        } else {\n            velocityPointB = { x: 0, y: 0 };\n            bodyBDenom = bodyB ? bodyB.inverseMass : 0;\n        }\n        \n        var relativeVelocity = Vector.sub(velocityPointB, velocityPointA),\n            normalImpulse = Vector.dot(normal, relativeVelocity) / (bodyADenom + bodyBDenom);\n    \n        if (normalImpulse > 0) normalImpulse = 0;\n    \n        var normalVelocity = {\n            x: normal.x * normalImpulse, \n            y: normal.y * normalImpulse\n        };\n\n        var torque;\n \n        if (bodyA && !bodyA.isStatic) {\n            torque = Vector.cross(offsetA, normalVelocity) * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x;\n            bodyA.constraintImpulse.y -= force.y;\n            bodyA.constraintImpulse.angle += torque;\n\n            // apply forces\n            bodyA.position.x -= force.x;\n            bodyA.position.y -= force.y;\n            bodyA.angle += torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            torque = Vector.cross(offsetB, normalVelocity) * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x;\n            bodyB.constraintImpulse.y += force.y;\n            bodyB.constraintImpulse.angle -= torque;\n            \n            // apply forces\n            bodyB.position.x += force.x;\n            bodyB.position.y += force.y;\n            bodyB.angle -= torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            impulse.angle = 0;\n            impulse.x = 0;\n            impulse.y = 0;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            _triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    var _triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Returns a hex colour string made by lightening or darkening color by percent.\n     * @method shadeColor\n     * @param {string} color\n     * @param {number} percent\n     * @return {string} A hex colour\n     */\n    Common.shadeColor = function(color, percent) {   \n        // http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color\n        var colorInteger = parseInt(color.slice(1),16), \n            amount = Math.round(2.55 * percent), \n            R = (colorInteger >> 16) + amount, \n            B = (colorInteger >> 8 & 0x00FF) + amount, \n            G = (colorInteger & 0x0000FF) + amount;\n        return \"#\" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R :255) * 0x10000 \n                + (B < 255 ? B < 1 ? 0 : B : 255) * 0x100 \n                + (G < 255 ? G < 1 ? 0 : G : 255)).toString(16).slice(1);\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        // http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object\n        try {\n            return obj instanceof HTMLElement;\n        }\n        catch(e){\n            return (typeof obj===\"object\") &&\n              (obj.nodeType===1) && (typeof obj.style === \"object\") &&\n              (typeof obj.ownerDocument ===\"object\");\n        }\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp (high-res if available).\n     * @method now\n     * @return {number} the current timestamp (high-res if available)\n     */\n    Common.now = function() {\n        // http://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript\n        // https://gist.github.com/davidwaterston/2982531\n\n        var performance = window.performance || {};\n\n        performance.now = (function() {\n            return performance.now    ||\n            performance.webkitNow     ||\n            performance.msNow         ||\n            performance.oNow          ||\n            performance.mozNow        ||\n            function() { return +(new Date()); };\n        })();\n              \n        return performance.now();\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://gist.github.com/ngryman/3830489\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://mgechev.github.io/javascript-algorithms/graphs_others_topological-sort.js.html\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                _topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    var _topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                _topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n})();\n\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        _bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        _bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        _bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    var _bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    var _bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method updateAll\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    var _bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.12.0';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    var _getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp = (typeof window !== \"undefined\" ? window['decomp'] : typeof global !== \"undefined\" ? global['decomp'] : null);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = -20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.trapezoid(xx, yy, width, height, 0.3, { \n                collisionFilter: {\n                    group: group\n                },\n                friction: 0.01,\n                chamfer: {\n                    radius: 10\n                }\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8,\n            density: 0.01\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8,\n            density: 0.01\n        });\n                    \n        var axelA = Constraint.create({\n            bodyA: body,\n            pointA: { x: wheelAOffset, y: wheelYOffset },\n            bodyB: wheelA,\n            stiffness: 0.2,\n            render: {\n                lineWidth: 0\n            }\n        });\n                        \n        var axelB = Constraint.create({\n            bodyA: body,\n            pointA: { x: wheelBOffset, y: wheelYOffset },\n            bodyB: wheelB,\n            stiffness: 0.2,\n            render: {\n                lineWidth: 0\n            }\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.4 }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        _svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    var _svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @return {vector} A new vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        return {\n            x: vector.x * cos - vector.y * sin,\n            y: vector.x * sin + vector.y * cos\n        };\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle in radians between the two vectors relative to the x-axis.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        radius = radius || [8];\n\n        if (!radius.length)\n            radius = [radius];\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i--) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n    \n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || { \n            min: { \n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object); \n\n            if (min && max) { \n                if (min.x < bounds.min.x) \n                    bounds.min.x = min.x;\n                    \n                if (max.x > bounds.max.x) \n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y) \n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y) \n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n        \n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB;\n\n            if (bodyA) {\n                c.beginPath();\n                c.moveTo(bodyA.position.x + constraint.pointA.x, bodyA.position.y + constraint.pointA.y);\n            } else {\n                c.beginPath();\n                c.moveTo(constraint.pointA.x, constraint.pointA.y);\n            }\n\n            if (bodyB) {\n                c.lineTo(bodyB.position.x + constraint.pointB.x, bodyB.position.y + constraint.pointB.y);\n            } else {\n                c.lineTo(constraint.pointB.x, constraint.pointB.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n        }\n    };\n    \n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y); \n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale, \n                        texture.height * -sprite.yOffset * sprite.yScale, \n                        texture.width * sprite.xScale, \n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y); \n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n                        \n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n                \n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n            \n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2, \n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n            \n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n                \n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth, \n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight, \n                    grid.bucketWidth, \n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n            \n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), \n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), \n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region. \n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"matter-js\")):\"function\"==typeof define&&define.amd?define([\"matter-js\"],t):\"object\"==typeof exports?exports.MatterCollisionEvents=t(require(\"matter-js\")):e.MatterCollisionEvents=t(e.Matter)}(this,function(e){return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=1)}([function(t,n){t.exports=e},function(e,t,n){var o=n(0),r={name:\"matter-collision-events\",version:\"0.1.5\",for:\"matter-js@^0.12.0\",install:function(e){var t=e.Body.create;e.Body.create=function(){var e=t.apply(null,arguments);return e.onCollide=function(t){e._mceOC=t},e.onCollideEnd=function(t){e._mceOCE=t},e.onCollideActive=function(t){e._mceOCA=t},e},e.after(\"Engine.create\",function(){e.Events.on(this,\"collisionStart\",function(t){t.pairs.map(function(t){e.Events.trigger(t.bodyA,\"onCollide\",{pair:t}),e.Events.trigger(t.bodyB,\"onCollide\",{pair:t}),t.bodyA._mceOC&&t.bodyA._mceOC(t),t.bodyB._mceOC&&t.bodyB._mceOC(t)})}),e.Events.on(this,\"collisionActive\",function(t){t.pairs.map(function(t){e.Events.trigger(t.bodyA,\"onCollideActive\",{pair:t}),e.Events.trigger(t.bodyB,\"onCollideActive\",{pair:t}),t.bodyA._mceOCA&&t.bodyA._mceOCA(t),t.bodyB._mceOCA&&t.bodyB._mceOCA(t)})}),e.Events.on(this,\"collisionEnd\",function(t){t.pairs.map(function(t){e.Events.trigger(t.bodyA,\"onCollideEnd\",{pair:t}),e.Events.trigger(t.bodyB,\"onCollideEnd\",{pair:t}),t.bodyA._mceOCE&&t.bodyA._mceOCE(t),t.bodyB._mceOCE&&t.bodyB._mceOCE(t)})})})}};o.Plugin.register(r),e.exports.MatterCollisionEvents=r}])});","/*!\n *  howler.js v2.1.3\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        for (var i=0; i<self.html5PoolSize; i++) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended. \n        // If there is, play that sound. If not, continue as usual.  \n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = parseFloat(from);\n      to = parseFloat(to);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol);\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.1.3\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n","export const SOUNDS = [\n  {\n    name: \"mario_nes_snes_sounds/1up.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/1up.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Break Brick.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Break Brick.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/coin (nes).mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/coin (nes).mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/coin (snes).mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/coin (snes).mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/emerge (nes).mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/emerge (nes).mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/emerge (snes).mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/emerge (snes).mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/fireball.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/fireball.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/hit block (nes).mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/hit block (nes).mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/hit block (snes).mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/hit block (snes).mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Invincibility Music.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Invincibility Music.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Mario 1 - Cannon.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 1 - Cannon.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Mario 1 - Die.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 1 - Die.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Mario 1 - Game Over.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 1 - Game Over.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Mario 1 - GameOver 2.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 1 - GameOver 2.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Mario 1 - Jump.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 1 - Jump.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Mario 1 - Mario Riff.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 1 - Mario Riff.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Mario 1 - Win 2.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 1 - Win 2.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Mario 1 - Win Stage.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 1 - Win Stage.mp3\")\n  },\n  {\n    name: \"mario_nes_snes_sounds/Mario 1 - Win.mp3\",\n    path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 1 - Win.mp3\")\n  },\n//{\n//  name: \"mario_nes_snes_sounds/Mario 2 - damage (snes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 2 - damage (snes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 2 - Die.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 2 - Die.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 2 - Door.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 2 - Door.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 2 - Game Over.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 2 - Game Over.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 2 - jump.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 2 - jump.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 2 - Pick Up (snes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 2 - Pick Up (snes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 2 - Select character.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 2 - Select character.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 2 - Throw.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 2 - Throw.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 2 - win level.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 2 - win level.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 2 - win lives.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 2 - win lives.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - battle victory.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - battle victory.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - beat final boss.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - beat final boss.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - Die (nes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - Die (nes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - Die (snes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - Die (snes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - Door.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - Door.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - dry_bones.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - dry_bones.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - enter stage.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - enter stage.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - Explosion (nes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - Explosion (nes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - Explosion (snes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - Explosion (snes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - flame.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - flame.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - Game Over.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - Game Over.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - get item.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - get item.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - jump (nes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - jump (nes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - jump (snes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - jump (snes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - koopaKid spin.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - koopaKid spin.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - level complete.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - level complete.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - mapMove.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - mapMove.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - power up (snes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - power up (snes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - Power Up.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - Power Up.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - reveal item (rough).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - reveal item (rough).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - skid (snes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - skid (snes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - sprint.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - sprint.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - tail.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - tail.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - thwomp.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - thwomp.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - vanish (nes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - vanish (nes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/mario 3 - vanish (snes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/mario 3 - vanish (snes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario 3 - whistle.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario 3 - whistle.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario World - 1up.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario World - 1up.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario World - Jump (reverb).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario World - Jump (reverb).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Mario World - SpringBoard.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Mario World - SpringBoard.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/pause (nes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/pause (nes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/pause (snes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/pause (snes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Pipe.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Pipe.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Power Up (nes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Power Up (nes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/Power Up (snes).mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/Power Up (snes).mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/saveGame.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/saveGame.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/shell kick.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/shell kick.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/stomp.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/stomp.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/time's running out.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/time's running out.mp3\")\n//},\n//{\n//  name: \"mario_nes_snes_sounds/vine emerge.mp3\",\n//  path: require(\"../assets/sounds/mario_nes_snes_sounds/vine emerge.mp3\")\n//}\n];\n\n","import { Howl } from 'howler';\n\nimport { SOUNDS } from './sounds/mario.js';\n\nconst soundMap = {};\n\nexport function getSounds() {\n  return SOUNDS;\n}\n\nexport function getSoundMap() {\n  SOUNDS.forEach((sound, index) => soundMap[index] = new Howl({ src: sound.path }));\n  return soundMap;\n}\n\nexport function playSound(soundId) {\n  soundMap[soundId].play();\n}\n","import controls from './controls.css';\n\nimport { getSounds, getSoundMap } from './sound.js';\nimport { updatePlatformDiagram } from './platform.js';\n\nlet selectedSoundId = 0;\n\nlet currentKey = null;\nlet currentKeyLabel = null;\nlet currentKeyInput = null;\n\nlet delay = 1000;\nlet delayLabel = null;\nlet delayInput = null;\n\nlet rotate = 0.3;\nlet rotateLabel = null;\nlet rotateInput = null;\n\nexport function getSelectedSoundId() {\n  return selectedSoundId;\n}\n\nexport function getCurrentKey() {\n  return currentKey;\n}\n\nexport function getDelay() {\n  return delay;\n}\n\nexport function getRotation() {\n  return rotate;\n}\n\nexport function setCurrentKey(key) {\n  currentKey = key;\n\n  let element = document.getElementById('key');\n  element.value = key;\n}\n\nexport function updateCurrentKey(key) {\n  currentKey = key;\n  currentKeyInput.value = key;\n}\n\nexport function buildControls(element) {\n  const soundMap = getSoundMap();\n  const select = document.createElement('select');\n\n  select.id = 'select-sound';\n  select.addEventListener('change', event => { console.log('select');  selectedSoundId = event.target.selectedOptions[0].value });\n\n  for (const key in soundMap) {\n    const option = document.createElement('option');\n    option.value = key;\n    option.text = getSounds()[key].name;\n\n    select.add(option);\n  }\n\n  element.append(select);\n\n  currentKeyLabel = document.createElement('label');\n  currentKeyLabel.innerText = \"current key\";\n\n  currentKeyInput = document.createElement('input');\n  currentKeyInput.readOnly = true;\n  currentKeyInput.disabled = true;\n  currentKeyInput.value = getCurrentKey();\n\n  currentKeyLabel.append(currentKeyInput);\n\n  element.append(currentKeyLabel);\n\n  delayLabel = document.createElement('label');\n  delayLabel.innerText = \"delay\";\n\n  delayInput = document.createElement('input');\n  delayInput.type = \"number\";\n  delayInput.value = getDelay();\n  delayInput.addEventListener('keyup', event => { console.log('keyup', event); delay = event.target.value });\n\n  delayLabel.append(delayInput);\n\n  element.append(delayLabel);\n\n  rotateLabel = document.createElement('label');\n  rotateLabel.innerText = \"rotate\";\n\n  rotateInput = document.createElement('input');\n  rotateInput.type = \"number\";\n  rotateInput.value = getRotation();\n  rotateInput.step = 0.1;\n  rotateInput.addEventListener('change', event => {\n    rotate = event.target.value\n    updatePlatformDiagram(rotate);\n  });\n\n  rotateLabel.append(rotateInput);\n\n  element.append(rotateLabel);\n}\n\n","import { Composite, World, Body, Bodies, Query } from 'matter-js';\n\nimport { playSound } from './sound.js';\nimport { getSelectedSoundId, getRotation } from './controls.js';\n\nconst platforms = {};\nlet platformDiagram = null;\n\nfunction handleCollision(pair) {\n  const { bodyA, bodyB } = pair;\n  const { id } = bodyA.label === \"Rectangle Body\" ? bodyA : bodyB;\n  const { soundId } = platforms[id];\n\n  playSound(soundId);\n}\n\nfunction createPlatform(world, x, y, angle) {\n  var body = Bodies.rectangle(x, y, 50, 10, { isStatic: true, angle })\n\n  platforms[body.id] = {\n    body,\n    soundId: getSelectedSoundId()\n  }\n\n  body.onCollide(handleCollision);\n\n  World.add(world, body);\n};\n\nexport function addPlatform(world, event) {\n  const { x, y } = event.source.constraint.pointA;\n  const angle = getRotation();\n\n  createPlatform(world, x, y, angle);\n};\n\nexport function removePlatform(world, event) {\n  const { x, y } = event.source.constraint.pointA;\n  const bodies = Object.values(platforms).map(platform => platform.body);\n  const body = Query.point(bodies, { x, y })[0];\n\n  if (body) {\n    Composite.remove(world, body);\n  }\n};\n\nexport function updatePlatformSound(world, event) {\n  const { x, y } = event.source.constraint.pointA;\n  const bodies = Object.values(platforms).map(platform => platform.body);\n  const platformId = Query.point(bodies, { x, y })[0].id;\n\n  platforms[platformId].soundId = getSelectedSoundId();\n}\n\nexport function updatePlatformAngle(world, event, angle) {\n  const { x, y } = event.source.constraint.pointA;\n  const bodies = Object.values(platforms).map(platform => platform.body);\n  const body = Query.point(bodies, { x, y })[0];\n\n  if (body) {\n    Body.setAngle(body, angle);\n  }\n}\n\nexport function buildPlatformDiagram(world) {\n  platformDiagram = Bodies.rectangle(30, 20, 25, 5, {\n    isStatic: true,\n    render: {\n      strokeStyle: 'red',\n      lineWidth: 2\n    },\n    angle: getRotation()\n  })\n\n  World.add(world, platformDiagram);\n}\n\nexport function updatePlatformDiagram(angle) {\n  Body.setAngle(platformDiagram, angle);\n}\n","import { World, Bodies, Query, Composite } from 'matter-js';\n\nconst fountains = {};\n\nfunction addBall(world, render, x, y, isStatic = false) {\n  let ball = Bodies.circle(x, isStatic ? y : y + 20, 10, {\n    friction: 0,\n    restitution: 1,\n    density: 1,\n    isStatic\n  });\n\n  ball.plugin.wrap = {\n    min: { x: render.bounds.min.x, y: render.bounds.min.y },\n    max: { x: render.bounds.max.x, y: render.bounds.max.y }\n  };\n\n  World.add(world, ball);\n\n  return ball\n}\n\n\nexport function addFountain(world, render, x, y, delay, key = Object.keys(fountains).length) {\n  const head = addBall(world, render, x, y, true);\n  const body = window.setInterval(addBall, delay, world, render, x, y);\n\n  head.interval = body;\n\n  fountains[key] = {\n    head,\n    body\n  }\n\n  console.log('after', fountains);\n};\n\nexport function removeFountain(world, event) {\n  const { x, y } = event.source.constraint.pointA;\n\n  const bodies = Object.values(fountains).map(fountain => fountain.head);\n\n  const body = Query.point(bodies, { x, y })[0];\n\n  if (body) {\n    window.clearInterval(body.interval);\n\n    Composite.remove(world, body);\n  }\n}\n\n\n\n","import Matter, { Engine, Events, Render, World, Bodies, Composites, Constraint, Mouse, MouseConstraint } from 'matter-js'; // eslint-disable-line\nimport { MatterCollisionEvents } from 'matter-collision-events';\n\nimport { buildPlatformDiagram, addPlatform, updatePlatformSound, updatePlatformAngle, removePlatform } from './platform.js';\nimport { addFountain, removeFountain } from './fountain.js';\nimport { buildControls, getCurrentKey, updateCurrentKey, getDelay, getRotation } from './controls.js';\n\nMatter.use(MatterCollisionEvents);\n\n\nexport default function Game(element) {\n  window.addEventListener(\"keydown\", event => { updateCurrentKey(event.key) });\n\n  // create an engine\n  var engine = Engine.create();\n\n  engine.world.gravity.y = .5;\n  engine.world.gravity.x = 0;\n\n  // create a renderer\n  var render = Render.create({\n    element,\n    engine,\n    showDebug: true,\n    showVelocity: true,\n    showShadows: true,\n    showMousePosition: true\n  });\n\n  // run the engine\n  Engine.run(engine);\n\n  // run the renderer\n  Render.run(render);\n\n  var mouse = Mouse.create(render.canvas);\n  var mouseConstraint = MouseConstraint.create(engine, {\n    mouse,\n    constraint: {\n      stiffness: 1,\n      render: {\n        visible: true\n      }\n    }\n  });\n\n  // keep the mouse in sync with rendering\n  render.mouse = mouse;\n\n  Events.on(mouseConstraint, \"mouseup\", event => {\n    switch (getCurrentKey()) {\n      case \"p\":\n        addPlatform(engine.world, event);\n        break;\n      case \"P\":\n        removePlatform(engine.world, event);\n        break;\n      case \"u\":\n        updatePlatformAngle(engine.world, event, getRotation());\n        break;\n      case \"s\":\n        updatePlatformSound(engine.world, event);\n        break;\n      case \"f\":\n        const { x, y } = event.source.constraint.pointA;\n\n        addFountain(engine.world, render, x, y, getDelay());\n        break;\n      case \"F\":\n        removeFountain(engine.world, event);\n        break;\n      default: return null;\n    }\n  });\n\n  // add all of the bodies to the world\n  World.add(engine.world, mouseConstraint);\n\n  buildControls(document.getElementById('controls'));\n  buildPlatformDiagram(engine.world);\n}\n","import './index.css';\n\nimport Game from './game.js';\n\ndocument.addEventListener('DOMContentLoaded', event => {\n  const app = Game(document.getElementById('root'));\n})\n"]}